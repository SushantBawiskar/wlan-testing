{"name": "test_tcp_upd_wpa2_personal_bridge_2g_band_ac_station[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: enable_wlan() got an unexpected keyword argument 'key'", "trace": "request = <SubRequest 'setup_profiles' for <Function test_tcp_upd_wpa2_personal_bridge_2g_band_ac_station[setup_profiles0]>>, setup_controller = <controller.controller_3x.controller.CController object at 0x7f259c67cfd0>\ntestbed = 'cisco-testbed-02', get_equipment_ref = ['FOC25322JQP', 'FJC2428146G'], fixtures_ver = <fixtures_3x.Fixtures_3x object at 0x7f259c67cf40>, reset_scenario_lf = ''\ninstantiate_profile = <class 'controller.controller_3x.controller.CController'>, get_markers = {'fiveg': False, 'open': False, 'radius': False, 'twog': True, ...}, create_lanforge_chamberview_dut = 'cisco9130axe'\nlf_tools = <lf_tools.ChamberView object at 0x7f259c680b20>, run_lf = False, get_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'chamber': 'C1', 'ip': '192.168.100.109', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', ...}, {'...hy0'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}, get_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1813, ...}, cc_1 = True\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_ref, fixtures_ver, reset_scenario_lf,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools, run_lf,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info, cc_1):\n        param = dict(request.param)\n    \n        # VLAN Setup\n        if request.param[\"mode\"] == \"VLAN\":\n    \n            vlan_list = list()\n            refactored_vlan_list = list()\n            ssid_modes = request.param[\"ssid_modes\"].keys()\n            for mode in ssid_modes:\n                for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                    if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                        vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                    else:\n                        pass\n            if vlan_list:\n                [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                vlan_list = refactored_vlan_list\n                for i in range(len(vlan_list)):\n                    if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                        vlan_list.pop(i)\n        if request.param[\"mode\"] == \"VLAN\":\n            lf_tools.reset_scenario()\n            lf_tools.add_vlan(vlan_ids=vlan_list)\n    \n        # call this, if 1.x\n        print(\"fixture version \", fixtures_ver)\n        if cc_1:\n>           return_var = fixtures_ver.setup_profiles(request, param, run_lf, instantiate_profile, get_configuration, get_markers, lf_tools)\n\ne2e/basic/conftest.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <fixtures_3x.Fixtures_3x object at 0x7f259c67cf40>, request = <SubRequest 'setup_profiles' for <Function test_tcp_upd_wpa2_personal_bridge_2g_band_ac_station[setup_profiles0]>>\nparam = {'mode': 'BRIDGE', 'radius': False, 'rf': {}, 'ssid_modes': {'wpa2_personal': [{'appliedRadios': ['2G'], 'security': '...d_wpa2_2g'}, {'appliedRadios': ['5G'], 'security': 'psk2', 'security_key': 'something', 'ssid_name': 'ssid_wpa2_5g'}]}}\nrun_lf = False, instantiate_profile = <class 'controller.controller_3x.controller.CController'>\nget_configuration = {'access_point': [{'chamber': 'C1', 'ip': '192.168.100.109', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', ...}, {'...hy0'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nget_markers = {'fiveg': False, 'open': False, 'radius': False, 'twog': True, ...}, lf_tools = <lf_tools.ChamberView object at 0x7f259c680b20>\n\n    def setup_profiles(self, request, param, run_lf, instantiate_profile, get_configuration, get_markers, lf_tools):\n        if run_lf:\n            return 0\n        print(\"hi nikita\")\n        parameter = dict(param)\n        print(\"parameter\", parameter)\n        # print(get_configuration)\n        instantiate_profile_obj = instantiate_profile(controller_data=get_configuration['controller'])\n        print(1, instantiate_profile_obj)\n        vlan_id, mode = 0, 0\n    \n        test_cases = {}\n        profile_data = {}\n        var = \"\"\n        list_key = list(parameter.keys())\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            return test_cases\n        profile_data[\"ssid\"] = {}\n        lf_dut_data = []\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                data = parameter[\"ssid_modes\"][i][j]\n                profile_data[\"ssid\"][i].append(data)\n        print(profile_data)\n    \n        # create wlan\n        for mode in profile_data['ssid']:\n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            j[\"appliedRadios\"] = list(set(j[\"appliedRadios\"]))\n                            j['security'] = 'psk2'\n                            # print(\"dut data\", lf_dut_data)\n                            test_cases[\"wpa_2g\"] = True\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal\"] = False\n    \n        print(\"lf dut data\", lf_dut_data)\n        # instantiate controller object\n        instantiate_profile_obj = instantiate_profile(controller_data=get_configuration['controller'], timeout=\"10\",\n                                                      ssid_data=lf_dut_data)\n        # set ssid on ap\n        # id_slot = instantiate_profile_obj.get_slot_id_wlan()\n        # print(id_slot)\n        # ssid_name = instantiate_profile_obj.get_ssid_name_on_id()\n        # print(ssid_name)\n        # if id_slot[0] == \"1\":\n        #     # ssid present hai\n        #     # delete karna hai\n        #     # create 2g ssid on 1\n        # elif id_slot[0] == \"0\":\n        #     # ssid present nhi h\n        #     # create 2g ssid\n        for band in range(len(lf_dut_data)):\n            if lf_dut_data[band][\"appliedRadios\"] == [\"2G\"]:\n                instantiate_profile_obj.no_logging_console()\n                instantiate_profile_obj.line_console()\n                id_slot = instantiate_profile_obj.get_slot_id_wlan()\n                ssid_name = instantiate_profile_obj.get_ssid_name_on_id()\n                if id_slot[0] == \"1\":\n                    instantiate_profile_obj.show_shutdown_2ghz_ap()\n                    instantiate_profile_obj.disable_wlan(id=\"1\", wlan=ssid_name[0], wlanssid=ssid_name[0])\n                    instantiate_profile_obj.ap_2ghz_shutdown(id=\"1\", wlan=ssid_name[0], wlanssid=ssid_name[0])\n                    instantiate_profile_obj.get_ssids()\n                    instantiate_profile_obj.delete_wlan(ssid=ssid_name[0])\n                    instantiate_profile_obj.get_ssids()\n                    instantiate_profile_obj.create_wlan_wpa2(id=\"1\", wlan=lf_dut_data[0]['ssid_name'],\n                                                             wlanssid=lf_dut_data[0]['ssid_name'],\n                                                             key=lf_dut_data[0]['security_key'])\n                else:\n                    print(lf_dut_data[0]['ssid_name'])\n                    instantiate_profile_obj.get_ssids()\n                    instantiate_profile_obj.show_shutdown_2ghz_ap()\n                    instantiate_profile_obj.get_ssids()\n                    instantiate_profile_obj.create_wlan_wpa2(id=\"1\", wlan=lf_dut_data[0]['ssid_name'],\n                                                             wlanssid=lf_dut_data[0]['ssid_name'],\n                                                             key=lf_dut_data[0]['security_key'])\n                    instantiate_profile_obj.get_ssids()\n    \n                instantiate_profile_obj.config_wireless_tag_policy_and_policy_profile(wlan=lf_dut_data[0]['ssid_name'])\n>               instantiate_profile_obj.enable_wlan(id=\"1\", wlan=lf_dut_data[0]['ssid_name'],\n                                                    wlanssid=lf_dut_data[0]['ssid_name'],\n                                                    key=lf_dut_data[0]['security_key'])\nE               TypeError: enable_wlan() got an unexpected keyword argument 'key'\n\nfixtures_3x.py:149: TypeError"}, "description": "Dataplane THroughput BRIDGE Mode\n           pytest -m \"dataplane_throughput_test and BRIDGE and wpa2_personal and twog\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk2'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1645092923121, "stop": 1645092923121, "uuid": "55e48a00-1a7a-45bb-aa95-dbf74755b84d", "historyId": "57618c7eed32824d5ec49e317ac0c392", "testCaseId": "c5d2364515f6365d732bb5847af5e97b", "fullName": "e2e.basic.performance_tests.dataplane_throughput_test.wpa2_security.test_dp_cc.TestDataplaneThroughputBRIDGE#test_tcp_upd_wpa2_personal_bridge_2g_band_ac_station", "labels": [{"name": "suite", "value": "performance"}, {"name": "feature", "value": "BRIDGE MODE Dataplane Throughput Test"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "dataplane_throughput_test"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "performance"}, {"name": "tag", "value": "yadav"}, {"name": "parentSuite", "value": "e2e.basic.performance_tests.dataplane_throughput_test.wpa2_security"}, {"name": "subSuite", "value": "TestDataplaneThroughputBRIDGE"}, {"name": "host", "value": "candela-nikita"}, {"name": "thread", "value": "148016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.performance_tests.dataplane_throughput_test.wpa2_security.test_dp_cc"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-3913", "name": "WIFI-3913"}]}