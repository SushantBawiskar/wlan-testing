{"name": "test_basic_roam_2g", "status": "broken", "statusDetails": {"message": "TypeError: string indices must be integers", "trace": "self = <tests.e2e.advanced.roam_test.roam_by_attenuation.test_bridge _roam.TestRateLimitingWithRadiusBridge object at 0x7f2b2319a1f0>\nget_configuration = {'access_point': [{'ap_name': 'AP687D.B45C.1D1C', 'chamber': 'C1', 'ip': '192.168.100.109', 'jumphost': True, ...}, {'...hy0'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nlf_test = <lanforge.lf_tests.RunTest object at 0x7f2b230e5bb0>, station_names_twog = ['wlan000'], lf_tools = <lf_tools.ChamberView object at 0x7f2b230e57c0>, run_lf = False, add_env_properties = None\ninstantiate_profile = <class 'controller.controller_3x.controller.CController'>\n\n    @pytest.mark.roam_2g\n    @pytest.mark.wpa2_personal\n    def test_basic_roam_2g(self, get_configuration, lf_test, station_names_twog, lf_tools, run_lf, add_env_properties, instantiate_profile):\n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = profile_data[\"security_key\"]\n        security = \"wpa2\"\n        mode = \"BRIDGE\"\n        band = \"twog\"\n        vlan = 1\n        c1_2g_bssid = \"\"\n        c2_2g_bssid = \"\"\n        if run_lf:\n            c1_2g_bssid = get_configuration[\"access_point\"][0][\"ssid\"][\"2g-bssid\"]\n            allure.attach(name=\"bssid of ap1\", body=c1_2g_bssid)\n            c2_2g_bssid = get_configuration[\"access_point\"][1][\"ssid\"][\"2g-bssid\"]\n            allure.attach(name=\"bssid of ap2\", body=c2_2g_bssid)\n    \n        else:\n            for ap_name in range(len(get_configuration['access_point'])):\n                print(\"ap \", ap_name)\n>               instantiate_profile_obj = instantiate_profile(controller_data=get_configuration['controller'],\n                                                              timeout=\"10\",\n                                                              ssid_data=ssid_name,\n                                                              ap_data=get_configuration['access_point'], type=ap_name)\n\ne2e/advanced/roam_test/roam_by_attenuation/test_bridge _roam.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <controller.controller_3x.controller.CController object at 0x7f2b230ea3a0>, controller_data = {'band': ['5g'], 'ip': 'localhost', 'password': 'Cisco123', 'prompt': 'WLC2', ...}\nap_data = [{'ap_name': 'AP687D.B45C.1D1C', 'chamber': 'C1', 'ip': '192.168.100.109', 'jumphost': True, ...}, {'ap_name': 'AP2C57.4152.385C', 'chamber': 'C2', 'ip': '192.168.100.109', 'jumphost': True, ...}], timeout = '10'\nssid_data = 'ssid_wpa2_2g', type = 0\n\n    def __init__(self, controller_data, ap_data=None, timeout=None, ssid_data=None, type=None):\n        self.controller_data = controller_data\n        self.ap_data = ap_data\n        self.type = type\n        print(\"type\", type)\n        print(self.ap_data)\n        self.ip = self.controller_data[\"ip\"]\n        self.user = self.controller_data[\"username\"]\n        self.password = self.controller_data[\"password\"]\n        self.port = self.controller_data[\"ssh_port\"]\n        self.type = self.controller_data[\"series\"]\n        self.prompt = self.controller_data[\"prompt\"]\n        # for i in range(controller_data[\"ap_name\"]):\n        #     self.ap_name = self.controller_data[\"ap_name\"][i]\n        # for band in range(controller_data[\"band\"]):\n        #     self.band = self.controller_data[\"band\"][i]\n        # self.ap_name = self.controller_data[\"ap_name\"][0][\"ap_name\"]   # hard coded\n        self.ap_name = None\n        if self.ap_name == None:\n            self.ap_name = self.ap_data[0]['ap_name']\n        if type == 0:\n            print(\"yes\")\n            self.ap_name = self.ap_data[0]['ap_name']\n            print(self.ap_data[0]['ap_name'])\n        if type == 1:\n            self.ap_name = self.ap_data[1]['ap_name']\n            print(self.ap_data[1]['ap_name'])\n    \n        print(\"ap_name //////\", self.ap_name)\n        self.band = self.controller_data[\"band\"][0]\n    \n        self.scheme = self.controller_data[\"scheme\"]\n        self.timeout = timeout\n        self.ssid_data= ssid_data\n        print(\"ssid data\", self.ssid_data)\n    \n        series = importlib.import_module(\"cc_module_9800_3504\")\n        self.cc = series.create_controller_series_object(\n                    scheme=self.scheme,\n                    dest=self.ip,\n                    user=self.user,\n                    passwd=self.password,\n                    prompt=self.prompt,\n                    series=self.type,\n                    ap=self.ap_name,\n                    port=self.port,\n                    band=self.band,\n                    timeout=self.timeout)\n        self.cc.bandwidth = None\n        if ssid_data is None:\n            self.cc.wlan = None\n            self.cc.wlanID = None\n            self.cc.wlanSSID = None\n            self.cc.security_key = None\n        else:\n            for i in range(len(ssid_data)):\n                print(i)\n>               if ssid_data[i][\"appliedRadios\"] == [\"2G\"]:\nE               TypeError: string indices must be integers\n\n../libs/controller/controller_3x/controller.py:73: TypeError"}, "start": 1645688570901, "stop": 1645688570907, "uuid": "3be772ad-3d89-40c9-9b8b-2a37c8a59666", "historyId": "9f98f60ec7fcd0f645de9f8f4f1fd3ce", "testCaseId": "9cf77c5d91bb69790749d591fee07eac", "fullName": "e2e.advanced.roam_test.roam_by_attenuation.test_bridge _roam.TestRateLimitingWithRadiusBridge#test_basic_roam_2g", "labels": [{"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "roam_2g"}, {"name": "tag", "value": "roam_test"}, {"name": "parentSuite", "value": "e2e.advanced.roam_test.roam_by_attenuation"}, {"name": "suite", "value": "test_bridge _roam"}, {"name": "subSuite", "value": "TestRateLimitingWithRadiusBridge"}, {"name": "host", "value": "candela-nikita"}, {"name": "thread", "value": "11412-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.advanced.roam_test.roam_by_attenuation.test_bridge _roam"}]}