{"name": "test_basic_roam_2g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "IndexError: list index out of range", "trace": "request = <SubRequest 'setup_profiles' for <Function test_basic_roam_2g[setup_profiles0]>>, setup_controller = '', testbed = 'cisco-testbed-02', get_equipment_ref = ['FOC25322JQP', 'FJC2428146G']\nfixtures_ver = <fixtures_3x.Fixtures_3x object at 0x7fae438d8b20>, instantiate_profile = <class 'controller.controller_3x.controller.CController'>, get_markers = {'fiveg': False, 'open': False, 'radius': False, 'twog': False, ...}\ncreate_lanforge_chamberview_dut = 'cisco9130axe', lf_tools = <lf_tools.ChamberView object at 0x7fae438dcb80>, get_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ap_name': 'AP687D.B45C.1D1C', 'chamber': 'C1', 'ip': '192.168.100.109', 'jumphost': True, ...}, {'...hy0'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}, get_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1813, ...}, run_lf = False, cc_1 = True\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_ref, fixtures_ver,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info, run_lf, cc_1):\n        lf_tools.reset_scenario()\n        param = dict(request.param)\n    \n        # VLAN Setup\n        if request.param[\"mode\"] == \"VLAN\":\n    \n            vlan_list = list()\n            refactored_vlan_list = list()\n            ssid_modes = request.param[\"ssid_modes\"].keys()\n            for mode in ssid_modes:\n                for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                    if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                        vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                    else:\n                        pass\n            if vlan_list:\n                [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                vlan_list = refactored_vlan_list\n                for i in range(len(vlan_list)):\n                    if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                        vlan_list.pop(i)\n        if request.param[\"mode\"] == \"VLAN\":\n            lf_tools.add_vlan(vlan_ids=vlan_list)\n        print(\"fixture version \", fixtures_ver)\n        if cc_1:\n>           return_var = fixtures_ver.setup_profiles( request, param, run_lf, instantiate_profile, get_configuration, get_markers, lf_tools)\n\ne2e/advanced/conftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nfixtures_3x.py:130: in setup_profiles\n    id_slot = instantiate_profile_obj.get_slot_id_wlan()\n../libs/controller/controller_3x/controller.py:274: in get_slot_id_wlan\n    id = self.calculate_data(place=0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <controller.controller_3x.controller.CController object at 0x7fae438e1dc0>, place = 0\n\n    def calculate_data(self, place):\n        wlan_number = self.get_number_of_wlan_present()\n        print(wlan_number)\n        for number in range(len(wlan_number)):\n            pass\n        wlan_sumry = self.get_ssids()\n        ele_list = [y for y in (x.strip() for x in wlan_sumry.splitlines()) if y]\n        indices = [i for i, s in enumerate(ele_list) if 'Profile Name' in s]\n        # print(indices)\n>       data = indices[1]\nE       IndexError: list index out of range\n\n../libs/controller/controller_3x/controller.py:236: IndexError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk2'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1645602460421, "stop": 1645602460421, "uuid": "c693b2c4-af8b-4e60-b480-e9f83d20eac5", "historyId": "4b56da74283c3ef476ce95ae5e2cb6bb", "testCaseId": "9cf77c5d91bb69790749d591fee07eac", "fullName": "e2e.advanced.roam_test.roam_by_attenuation.test_bridge _roam.TestRateLimitingWithRadiusBridge#test_basic_roam_2g", "labels": [{"name": "feature", "value": "Roam Test"}, {"name": "suite", "value": "Roam Test"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "roam_2g"}, {"name": "tag", "value": "roam_test"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "parentSuite", "value": "e2e.advanced.roam_test.roam_by_attenuation"}, {"name": "subSuite", "value": "TestRateLimitingWithRadiusBridge"}, {"name": "host", "value": "candela-nikita"}, {"name": "thread", "value": "37161-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.advanced.roam_test.roam_by_attenuation.test_bridge _roam"}]}