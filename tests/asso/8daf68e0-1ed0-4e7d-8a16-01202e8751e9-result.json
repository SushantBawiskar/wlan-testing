{"name": "test_multi_station_udp_download_5g[setup_profiles0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <tests.e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation.TestMultiAssoDisassoBridge object at 0x7f5fe515aeb0>, lf_test = <lanforge.lf_tests.RunTest object at 0x7f5fe515a3d0>\nlf_tools = <lf_tools.ChamberView object at 0x7f5fe515be50>, get_controller_logs = None, get_ap_config_slots = None, get_lf_logs = None\n\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-5694\", name=\"WIFI-5694\")\n    @pytest.mark.wpa2_personal\n    @pytest.mark.fiveg\n    @pytest.mark.udp_download_5g\n    def test_multi_station_udp_download_5g(self, lf_test, lf_tools, get_controller_logs, get_ap_config_slots, get_lf_logs):\n        allure.attach(name=\"Definition\",\n                      body=\"Multiple association/disassociation stability test intends to measure stability of Wi-Fi device \" \\\n                           \"under a dynamic environment with frequent change of connection status.\")\n        allure.attach(name=\"Procedure\",\n                      body=\"This test case definition states that we Create 16 stations on 5Ghz radio and all of these 16 stations should be on same radio.\" \\\n                           \" Run Wifi-capacity test for first 8 stations. \" \\\n                           \"8 stations are picked for sending/receiving packets while the other 8 STAs are picked to do a dis-association/re-association process during the test\" \\\n                           \" Enable downlink 8 Mbps UDP flow from DUT to each of the 8 traffic stations\" \\\n                           \"Disassociate the other 8 stations. Wait for 30 seconds, after that Re-associate the 8 stations.\")\n        # run wifi capacity test here\n        def thread_fun(station_list):\n            print(station_list)\n            time.sleep(60)\n            lf_tools.admin_up_down(sta_list=station_list, option=\"down\")\n            print(\"stations down\")\n            time.sleep(10)\n            lf_tools.admin_up_down(sta_list=station_list, option=\"up\")\n            print(\"stations up\")\n    \n        lf_tools.reset_scenario()\n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][1]\n        ssid_name = profile_data[\"ssid_name\"]\n        print(ssid_name)\n        mode = \"BRIDGE\"\n        vlan = 1\n        lf_tools.add_stations(band=\"5G\", num_stations=16, dut=lf_tools.dut_name, ssid_name=ssid_name)\n        lf_tools.Chamber_View()\n        sta_list = lf_tools.get_station_list()\n        print(sta_list)\n        lf_tools.admin_up_down(sta_list=sta_list, option=\"up\")\n        sel_stations = \",\".join(sta_list[0:8])\n        val = [['dl_rate_sel: Per-Station Download Rate:']]\n        thr1 = threading.Thread(target=thread_fun, args=(sta_list[8:16],))\n        thr1.start()\n        wct_obj = lf_test.wifi_capacity(instance_name=\"udp_download_5g\", mode=mode, vlan_id=vlan,\n                                        download_rate=\"8Mbps\", stations=sel_stations, raw_lines=val, batch_size=\"8\",\n                                        upload_rate=\"0Gbps\", protocol=\"UDP-IPv4\", duration=\"120000\",\n                                        create_stations=False)\n    \n        report_name = wct_obj.report_name[0]['LAST'][\"response\"].split(\":::\")[1].split(\"/\")[-1]\n    \n        lf_tools.attach_report_graphs(report_name=report_name)\n    \n        csv_val = lf_tools.read_csv_individual_station_throughput(dir_name=report_name, option=\"download\")\n        print(type(csv_val))\n        print(csv_val)\n        pass_value = 8 * 0.99\n        print(\"pass value \", pass_value)\n        pass_fail = []\n        allure.attach(name=\"Pass Fail Criteria\",\n                      body=\"UDP traffic rate is at least 99% of the configured rate for each station. Here configured \" \\\n                           \"traffic rate is 8 Mbps so traffic for each station should be 7.92 Mbps \")\n        if not csv_val:\n            print(\"csv file does not exist, station did not got ip, Test failed\")\n            allure.attach(name=\"Csv Data\", body=\"station did not got ip Test failed.\")\n>           assert False\nE           assert False\n\ne2e/advanced/multi_association_disassociation/wpa2_personal/test_bridge_association_disassociation.py:321: AssertionError"}, "attachments": [{"name": "Definition", "source": "ef29f95c-1b2e-4d13-a9e0-ae3453f4644c-attachment.attach"}, {"name": "Procedure", "source": "457fd6cc-d267-42b5-ac61-ba0f11b2038c-attachment.attach"}, {"name": "WIFI Capacity Test PDF Report", "source": "869cc39b-85a3-4e55-8b8a-77eec840568d-attachment.attach"}, {"name": "chart-0.png", "source": "fbe45c70-f21b-4b72-bd38-493e53e6b9ea-attachment.attach", "type": "image/png"}, {"name": "chart-2.png", "source": "214697bb-76f6-4b3b-a106-f4ee2f736e97-attachment.attach", "type": "image/png"}, {"name": "chart-3.png", "source": "aaa5ca29-e9c6-4398-9c72-22b1080977e9-attachment.attach", "type": "image/png"}, {"name": "chart-4.png", "source": "3b000d20-f585-48ee-a19d-7b1850fb1ea5-attachment.attach", "type": "image/png"}, {"name": "chart-5.png", "source": "b85de517-2050-49c3-8148-8ba5fb854448-attachment.attach", "type": "image/png"}, {"name": "chart-6.png", "source": "29778c40-32ce-4226-9366-3327adadad1f-attachment.attach", "type": "image/png"}, {"name": "chart-7.png", "source": "6fcd46a4-0162-4b24-9877-6b2c1db4be77-attachment.attach", "type": "image/png"}, {"name": "kpi-chart-1.png", "source": "4f61039c-03f4-4a0e-9902-61d20462b2ad-attachment.attach", "type": "image/png"}, {"name": "Pass Fail Criteria", "source": "39bd728e-5e42-4a02-b20e-4c380945c09a-attachment.attach"}, {"name": "Csv Data", "source": "2c0b7755-64ba-47dd-8517-b233e7548a23-attachment.attach"}], "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk2'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1645015445749, "stop": 1645015741849, "uuid": "e767d137-46ef-49a5-b462-1b3c26876841", "historyId": "90caaefa95b0b87c6e9665c2f2404f23", "testCaseId": "adba28e564cae6a81dece1c757b757ec", "fullName": "e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation.TestMultiAssoDisassoBridge#test_multi_station_udp_download_5g", "labels": [{"name": "tag", "value": "advance"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "multiassodisasso"}, {"name": "tag", "value": "udp_download_5g"}, {"name": "parentSuite", "value": "e2e.advanced.multi_association_disassociation.wpa2_personal"}, {"name": "suite", "value": "test_bridge_association_disassociation"}, {"name": "subSuite", "value": "TestMultiAssoDisassoBridge"}, {"name": "host", "value": "candela-nikita"}, {"name": "thread", "value": "30481-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-5694", "name": "WIFI-5694"}]}