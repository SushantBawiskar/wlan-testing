{"name": "test_multi_station_udp_download_5g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "SystemExit: None", "trace": "self = <tests.e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation.TestMultiAssoDisassoBridge object at 0x7faca3b1f550>, lf_test = <lanforge.lf_tests.RunTest object at 0x7faca3a66730>\nlf_tools = <lf_tools.ChamberView object at 0x7faca3a66100>, get_controller_logs = None, get_ap_config_slots = None, get_lf_logs = None\n\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-5694\", name=\"WIFI-5694\")\n    @pytest.mark.wpa2_personal\n    @pytest.mark.fiveg\n    @pytest.mark.udp_download_5g\n    def test_multi_station_udp_download_5g(self, lf_test, lf_tools, get_controller_logs, get_ap_config_slots, get_lf_logs):\n        allure.attach(name=\"Definition\",\n                      body=\"Multiple association/disassociation stability test intends to measure stability of Wi-Fi device \" \\\n                           \"under a dynamic environment with frequent change of connection status.\")\n        allure.attach(name=\"Procedure\",\n                      body=\"This test case definition states that we Create 16 stations on 5Ghz radio and all of these 16 stations should be on same radio.\" \\\n                           \" Run Wifi-capacity test for first 8 stations. \" \\\n                           \"8 stations are picked for sending/receiving packets while the other 8 STAs are picked to do a dis-association/re-association process during the test\" \\\n                           \" Enable downlink 8 Mbps UDP flow from DUT to each of the 8 traffic stations\" \\\n                           \"Disassociate the other 8 stations. Wait for 30 seconds, after that Re-associate the 8 stations.\")\n        # run wifi capacity test here\n        def thread_fun(station_list):\n            print(station_list)\n            time.sleep(60)\n            lf_tools.admin_up_down(sta_list=station_list, option=\"down\")\n            print(\"stations down\")\n            time.sleep(10)\n            lf_tools.admin_up_down(sta_list=station_list, option=\"up\")\n            print(\"stations up\")\n    \n        lf_tools.reset_scenario()\n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][1]\n        ssid_name = profile_data[\"ssid_name\"]\n        print(ssid_name)\n        mode = \"BRIDGE\"\n        vlan = 1\n        lf_tools.add_stations(band=\"5G\", num_stations=16, dut=lf_tools.dut_name, ssid_name=ssid_name)\n>       exit()\n\ne2e/advanced/multi_association_disassociation/wpa2_personal/test_bridge_association_disassociation.py:292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Use exit() or Ctrl-D (i.e. EOF) to exit, code = None\n\n    def __call__(self, code=None):\n        # Shells like IDLE catch the SystemExit, but listen when their\n        # stdin wrapper is closed.\n        try:\n            sys.stdin.close()\n        except:\n            pass\n>       raise SystemExit(code)\nE       SystemExit: None\n\n/usr/lib/python3.8/_sitebuiltins.py:26: SystemExit"}, "attachments": [{"name": "Definition", "source": "1f1e3d68-0087-4b5d-9550-495670484921-attachment.attach"}, {"name": "Procedure", "source": "1c5a8221-eafa-4f80-b84e-3e1f823eaadb-attachment.attach"}], "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'WPA2'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'WPA2'}]}, 'rf': {}, 'radius': False}"}], "start": 1645080162695, "stop": 1645080176665, "uuid": "771057b9-6851-4043-a981-5e85a2eeefaf", "historyId": "90caaefa95b0b87c6e9665c2f2404f23", "testCaseId": "adba28e564cae6a81dece1c757b757ec", "fullName": "e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation.TestMultiAssoDisassoBridge#test_multi_station_udp_download_5g", "labels": [{"name": "tag", "value": "bridge"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "multiassodisasso"}, {"name": "tag", "value": "advance"}, {"name": "tag", "value": "udp_download_5g"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "parentSuite", "value": "e2e.advanced.multi_association_disassociation.wpa2_personal"}, {"name": "suite", "value": "test_bridge_association_disassociation"}, {"name": "subSuite", "value": "TestMultiAssoDisassoBridge"}, {"name": "host", "value": "candela-nikita"}, {"name": "thread", "value": "17140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-5694", "name": "WIFI-5694"}]}