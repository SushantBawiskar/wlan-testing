{"name": "test_multi_station_udp_download_5g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: %d format: a number is required, not NoneType", "trace": "request = <SubRequest 'setup_profiles' for <Function test_multi_station_udp_download_5g[setup_profiles0]>>, setup_controller = <controller.controller_3x.controller.CController object at 0x7fb429ed45b0>, testbed = 'cisco-testbed-02'\nget_equipment_ref = ['FOC25322JQP', 'FJC2428146G'], fixtures_ver = <fixtures_3x.Fixtures_3x object at 0x7fb429ed4f70>, instantiate_profile = <class 'controller.controller_2x.controller.UProfileUtility'>\nget_markers = {'fiveg': True, 'open': False, 'radius': False, 'twog': False, ...}, create_lanforge_chamberview_dut = 'cisco9130axe', lf_tools = <lf_tools.ChamberView object at 0x7fb429ed4190>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'chamber': 'C1', 'ip': '192.168.100.109', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', ...}, {'...hy0'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}, get_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1813, ...}, run_lf = False, cc_1 = True\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_ref, fixtures_ver,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info, run_lf, cc_1):\n        lf_tools.reset_scenario()\n        param = dict(request.param)\n    \n        # VLAN Setup\n        if request.param[\"mode\"] == \"VLAN\":\n    \n            vlan_list = list()\n            refactored_vlan_list = list()\n            ssid_modes = request.param[\"ssid_modes\"].keys()\n            for mode in ssid_modes:\n                for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                    if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                        vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                    else:\n                        pass\n            if vlan_list:\n                [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                vlan_list = refactored_vlan_list\n                for i in range(len(vlan_list)):\n                    if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                        vlan_list.pop(i)\n        if request.param[\"mode\"] == \"VLAN\":\n            lf_tools.add_vlan(vlan_ids=vlan_list)\n    \n        if cc_1:\n>           return_var = fixtures_ver.setup_profiles( request, param, run_lf, instantiate_profile, get_configuration, get_markers)\n\ne2e/advanced/conftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nfixtures_3x.py:68: in setup_profiles\n    instantiate_profile_obj = instantiate_profile(controller_data=get_configuration['controller'])\n../libs/controller/controller_2x/controller.py:294: in __init__\n    self.sdk_client = Controller(controller_data=controller_data)\n../libs/controller/controller_2x/controller.py:161: in __init__\n    super().__init__(controller_data)\n../libs/controller/controller_2x/controller.py:38: in __init__\n    self.login_resp = self.login()\n../libs/controller/controller_2x/controller.py:93: in login\n    uri = self.build_uri_sec(\"oauth2\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <controller.controller_2x.controller.Controller object at 0x7fb429e5fd30>, path = 'oauth2'\n\n    def build_uri_sec(self, path):\n>       new_uri = 'https://%s:%d/api/v1/%s' % (self.host.hostname, self.host.port, path)\nE       TypeError: %d format: a number is required, not NoneType\n\n../libs/controller/controller_2x/controller.py:50: TypeError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something'}]}, 'rf': {}, 'radius': False}"}], "start": 1645014669574, "stop": 1645014669574, "uuid": "f9e5ec35-af1e-4896-901c-ca83cdc43812", "historyId": "90caaefa95b0b87c6e9665c2f2404f23", "testCaseId": "adba28e564cae6a81dece1c757b757ec", "fullName": "e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation.TestMultiAssoDisassoBridge#test_multi_station_udp_download_5g", "labels": [{"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "multiassodisasso"}, {"name": "tag", "value": "udp_download_5g"}, {"name": "tag", "value": "advance"}, {"name": "parentSuite", "value": "e2e.advanced.multi_association_disassociation.wpa2_personal"}, {"name": "suite", "value": "test_bridge_association_disassociation"}, {"name": "subSuite", "value": "TestMultiAssoDisassoBridge"}, {"name": "host", "value": "candela-nikita"}, {"name": "thread", "value": "26015-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.advanced.multi_association_disassociation.wpa2_personal.test_bridge_association_disassociation"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-5694", "name": "WIFI-5694"}]}